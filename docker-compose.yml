services:
  driver:
    container_name: driver-service
    build:
      context: .
      dockerfile: driver/Dockerfile
    restart: on-failure
    depends_on:
      - jaeger
      - otel-collector
      - prometheus
    ports:
      - 8481:84
      - 8081:80
    env_file:
      - driver/dev.env

  location:
    container_name: location-service
    build:
      context: .
      dockerfile: location/Dockerfile
    restart: on-failure
    depends_on:
      - jaeger
      - otel-collector
      - prometheus
    ports:
      - 8482:84
      - 8082:80
    env_file:
      - location/dev.env

  location-postgres:
    image: postgres:16.0
    container_name: "location-postgres"
    environment:
      POSTGRES_DB: "location"
      POSTGRES_USER: "location-service"
      POSTGRES_PASSWORD: "w87Pyw0WEsXEuORVFlLRyi"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - location_postgres_data:/var/lib/postgresql/data
    ports:
      - "5440:5432"

  jaeger:
    image: jaegertracing/all-in-one:1.52.0
    container_name: jaeger
    restart: on-failure
    ports:
      - 16686:16686

  otel-collector:
    image: otel/opentelemetry-collector:0.90.1
    container_name: otel-collector
    restart: on-failure
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - 1888:1888   # pprof extension
      - 8888:8888   # Prometheus prometrics exposed by the collector
      - 8889:8889   # Prometheus exporter prometrics
      - 13133:13133 # health_check extension
      - 4317:4317   # OTLP gRPC receiver
      - 55679:55679 # zpages extension
    depends_on:
      - jaeger

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: on-failure
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    restart: on-failure
    env_file:
      - grafana/conf.env
    ports:
      - 3000:3000
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.4.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_PEER_PORT: 2888
      ZOOKEEPER_LEADER_PORT: 3888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: "zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888"
    ports:
      - 22181:2181
    volumes:
      - ./data/zoo1/data:/var/lib/zookeeper/data
      - ./data/zoo1/log:/var/lib/zookeeper/log

  zookeeper-2:
    image: confluentinc/cp-zookeeper:7.4.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_PEER_PORT: 2888
      ZOOKEEPER_LEADER_PORT: 3888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: "zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888"
    ports:
      - 32181:2181
    volumes:
      - ./data/zoo2/data:/var/lib/zookeeper/data
      - ./data/zoo2/log:/var/lib/zookeeper/log

  zookeeper-3:
    image: confluentinc/cp-zookeeper:7.4.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_PEER_PORT: 2888
      ZOOKEEPER_LEADER_PORT: 3888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: "zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888"
    ports:
      - 42181:2181
    volumes:
      - ./data/zoo3/data:/var/lib/zookeeper/data
      - ./data/zoo3/log:/var/lib/zookeeper/log

  kafka-1:
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: Docker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181/kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 39999
    volumes:
      - ./data/kafka1:/var/lib/kafka/data

  kafka-2:
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 39092:39092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_BROKER_RACK: Docker
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181/kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_JMX_PORT: 39999
    volumes:
      - ./data/kafka2:/var/lib/kafka/data

  kafka-3:
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 49092:49092
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_BROKER_RACK: Docker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181/kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:49092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 39999
    volumes:
      - ./data/kafka3:/var/lib/kafka/data

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    command:
      - --kafka.server=kafka-1:9092
      - --kafka.server=kafka-2:9092
      - --kafka.server=kafka-3:9092
    ports:
      - 9308:9308

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      KAFKA_BROKERCONNECT: kafka-1:9092,kafka-2:9092,kafka-3:9092
      CMD_ARGS: --schemaregistry.connect=http://schema-registry:8081
    ports:
      - 9000:9000

  driver-mongo:
    image: "mongo:latest"
    container_name: "driver-mongo"
    restart: on-failure
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: driver-service
      MONGO_INITDB_ROOT_PASSWORD: YX7iWN1XaFo1POJ
    volumes:
      - driver_mongo_data:/data/db

volumes:
  prometheus_data:
  location_postgres_data:
  driver_mongo_data:
