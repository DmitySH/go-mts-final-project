// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/driver.proto

package driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverClient interface {
	GetTrips(ctx context.Context, in *GetTripsRequest, opts ...grpc.CallOption) (*GetTripsResponse, error)
	GetTripByID(ctx context.Context, in *GetTripByIDRequest, opts ...grpc.CallOption) (*GetTripByIDResponse, error)
	CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*CancelTripResponse, error)
	AcceptTrip(ctx context.Context, in *AcceptTripRequest, opts ...grpc.CallOption) (*AcceptTripResponse, error)
	StartTrip(ctx context.Context, in *StartTripRequest, opts ...grpc.CallOption) (*StartTripResponse, error)
	EndTrip(ctx context.Context, in *EndTripRequest, opts ...grpc.CallOption) (*EndTripResponse, error)
}

type driverClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverClient(cc grpc.ClientConnInterface) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) GetTrips(ctx context.Context, in *GetTripsRequest, opts ...grpc.CallOption) (*GetTripsResponse, error) {
	out := new(GetTripsResponse)
	err := c.cc.Invoke(ctx, "/taxi.driver.Driver/GetTrips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetTripByID(ctx context.Context, in *GetTripByIDRequest, opts ...grpc.CallOption) (*GetTripByIDResponse, error) {
	out := new(GetTripByIDResponse)
	err := c.cc.Invoke(ctx, "/taxi.driver.Driver/GetTripByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) CancelTrip(ctx context.Context, in *CancelTripRequest, opts ...grpc.CallOption) (*CancelTripResponse, error) {
	out := new(CancelTripResponse)
	err := c.cc.Invoke(ctx, "/taxi.driver.Driver/CancelTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) AcceptTrip(ctx context.Context, in *AcceptTripRequest, opts ...grpc.CallOption) (*AcceptTripResponse, error) {
	out := new(AcceptTripResponse)
	err := c.cc.Invoke(ctx, "/taxi.driver.Driver/AcceptTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) StartTrip(ctx context.Context, in *StartTripRequest, opts ...grpc.CallOption) (*StartTripResponse, error) {
	out := new(StartTripResponse)
	err := c.cc.Invoke(ctx, "/taxi.driver.Driver/StartTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) EndTrip(ctx context.Context, in *EndTripRequest, opts ...grpc.CallOption) (*EndTripResponse, error) {
	out := new(EndTripResponse)
	err := c.cc.Invoke(ctx, "/taxi.driver.Driver/EndTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
// All implementations must embed UnimplementedDriverServer
// for forward compatibility
type DriverServer interface {
	GetTrips(context.Context, *GetTripsRequest) (*GetTripsResponse, error)
	GetTripByID(context.Context, *GetTripByIDRequest) (*GetTripByIDResponse, error)
	CancelTrip(context.Context, *CancelTripRequest) (*CancelTripResponse, error)
	AcceptTrip(context.Context, *AcceptTripRequest) (*AcceptTripResponse, error)
	StartTrip(context.Context, *StartTripRequest) (*StartTripResponse, error)
	EndTrip(context.Context, *EndTripRequest) (*EndTripResponse, error)
	mustEmbedUnimplementedDriverServer()
}

// UnimplementedDriverServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (UnimplementedDriverServer) GetTrips(context.Context, *GetTripsRequest) (*GetTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrips not implemented")
}
func (UnimplementedDriverServer) GetTripByID(context.Context, *GetTripByIDRequest) (*GetTripByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripByID not implemented")
}
func (UnimplementedDriverServer) CancelTrip(context.Context, *CancelTripRequest) (*CancelTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTrip not implemented")
}
func (UnimplementedDriverServer) AcceptTrip(context.Context, *AcceptTripRequest) (*AcceptTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTrip not implemented")
}
func (UnimplementedDriverServer) StartTrip(context.Context, *StartTripRequest) (*StartTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTrip not implemented")
}
func (UnimplementedDriverServer) EndTrip(context.Context, *EndTripRequest) (*EndTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTrip not implemented")
}
func (UnimplementedDriverServer) mustEmbedUnimplementedDriverServer() {}

// UnsafeDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServer will
// result in compilation errors.
type UnsafeDriverServer interface {
	mustEmbedUnimplementedDriverServer()
}

func RegisterDriverServer(s grpc.ServiceRegistrar, srv DriverServer) {
	s.RegisterService(&Driver_ServiceDesc, srv)
}

func _Driver_GetTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi.driver.Driver/GetTrips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetTrips(ctx, req.(*GetTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetTripByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetTripByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi.driver.Driver/GetTripByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetTripByID(ctx, req.(*GetTripByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_CancelTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).CancelTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi.driver.Driver/CancelTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).CancelTrip(ctx, req.(*CancelTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_AcceptTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).AcceptTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi.driver.Driver/AcceptTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).AcceptTrip(ctx, req.(*AcceptTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_StartTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).StartTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi.driver.Driver/StartTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).StartTrip(ctx, req.(*StartTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_EndTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).EndTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxi.driver.Driver/EndTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).EndTrip(ctx, req.(*EndTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Driver_ServiceDesc is the grpc.ServiceDesc for Driver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Driver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taxi.driver.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrips",
			Handler:    _Driver_GetTrips_Handler,
		},
		{
			MethodName: "GetTripByID",
			Handler:    _Driver_GetTripByID_Handler,
		},
		{
			MethodName: "CancelTrip",
			Handler:    _Driver_CancelTrip_Handler,
		},
		{
			MethodName: "AcceptTrip",
			Handler:    _Driver_AcceptTrip_Handler,
		},
		{
			MethodName: "StartTrip",
			Handler:    _Driver_StartTrip_Handler,
		},
		{
			MethodName: "EndTrip",
			Handler:    _Driver_EndTrip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/driver.proto",
}
